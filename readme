```markdown
# EchoSight: An AI-Driven Wearable Device

**EchoSight** is an assistive AI system designed to help visually impaired individuals by providing real-time voice feedback of detected faces and objects along with their proximity. It uses YOLOv4-tiny for object detection, facial recognition for known individuals, and WebSocket communication to fetch distance data from an ultrasonic sensor (NodeMCU).

---

## üîß Features

- üéØ **Real-time face recognition** using dlib and OpenCV  
- üì¶ **Object detection** with YOLOv4-tiny and COCO dataset  
- üîä **Audio feedback** via `pyttsx3` text‚Äëto‚Äëspeech engine  
- üì° **Distance measurement** via WebSocket from an ultrasonic sensor (NodeMCU)  
- üß† **Known-person greetings** from images in the `images/` folder  
- ü¶∫ **Proximity announcements** of detected objects in cm  

---

## üìÅ Project Structure

```text
EchoSight/
‚îú‚îÄ‚îÄ dlib/                         # dlib dependencies
‚îú‚îÄ‚îÄ images/                       # Known face images
‚îÇ   ‚îî‚îÄ‚îÄ your_face.jpg
‚îú‚îÄ‚îÄ main.py                       # Main application script
‚îú‚îÄ‚îÄ SimpleFaceRecognition.py      # Face recognition module
‚îú‚îÄ‚îÄ yolov4-tiny.cfg               # YOLOv4‚Äëtiny config file
‚îú‚îÄ‚îÄ yolov4-tiny.weights           # YOLOv4‚Äëtiny pretrained weights
‚îú‚îÄ‚îÄ coco.names                    # COCO class labels
‚îú‚îÄ‚îÄ README.md                     # Project documentation
‚îî‚îÄ‚îÄ __pycache__/                  # Python cache files
```

---

## üß∞ Requirements

- Python 3.8+  
- OpenCV  
- numpy  
- pyttsx3  
- websocket-client  
- dlib  
- face_recognition  

Install dependencies:

```bash
pip install opencv-python numpy pyttsx3 websocket-client dlib face_recognition
```

> ‚ö†Ô∏è **Note:** Installing `dlib` may require CMake and compatible build tools on Windows.

---

## üöÄ Installation & Usage

1. **Clone the repository**  
   ```bash
   git clone https://github.com/your-username/EchoSight.git
   cd EchoSight
   ```
2. **Prepare hardware**  
   - Connect your webcam (or ESP32‚ÄëCAM)  
   - Power on the NodeMCU with the ultrasonic sensor  
3. **Add known faces**  
   - Place JPG/PNG images in the `images/` directory  
   - Filenames (without extensions) will be used as labels  
4. **Configure WebSocket IP**  
   - Edit `main.py` and update:  
     ```python
     ws = websocket.WebSocketApp("ws://<Your_NodeMCU_IP>:81", on_message=on_message)
     ```
5. **Run the application**  
   ```bash
   python main.py
   ```
6. **Exit**  
   - Press `Esc` to terminate the program  

---

## üß† How It Works

1. **Face Recognition**  
   - Uses dlib‚Äôs facial embeddings to recognize and greet known individuals.  
2. **Object Detection**  
   - Detects objects in the video stream with YOLOv4‚Äëtiny (COCO dataset).  
3. **Distance Sensing**  
   - Receives real-time distance data via WebSocket from NodeMCU‚Äôs ultrasonic sensor.  
4. **Audio Feedback**  
   - Announces detected faces/objects and their distance using pyttsx3.

---

## üì∑ Sample Output

```text
Hello, Dheeraj
There is a person at 45 cm
There is a bottle at 30 cm
```
